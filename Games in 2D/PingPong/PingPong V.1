/ *
----- Created by Alejandrofz
----- Ping-pong game.
----- Compile with gcc -o pong pong.c -lncurses -lpthread.
----- Controls:
- W - Move the pallet upwards.
- S - Move the pallet downwards.
- A - Move the paddle to the left.
- D - Move the paddle to the right.
* /
 
 
#include <stdio.h> //Simple custom ....
#include <ncurses.h> //Use ncurses.
#include <math.h> //Functions for obtaining random numbers (rand ()).
#include <pthread.h> //Execution with several threads.
#include <time.h> //Provide time () that returns the time.
 
/*******************************/
int salir_ncurses(); //Close the ncurses mode.
void dibujar_marco(); //Draw the frame.
void *hiloposiciones(); //It is responsible for moving the palette and drawing the palette and the ball.
void *hilomoverpelota(); //It is responsible for moving the ball.
void dibujar_pelota(); //Draw the ball in a random position (the first time).
void pintar_paleta(); //Draw the palette (the first time).
void direc_aleatoria(); //A random direction for the ball (the first time).
void escojer_dificultad(); //It takes care of the difficulty of the game.
/*******************************/
 
 
/******   VARIABLES   *******/
int x_pelota, y_pelota, x_paleta, y_paleta, dpx_pelota, dpy_pelota, dificultad;
char key; //Save the key that we press.
/*** Variables for threads ***/
pthread_t idhiloposiciones; //Thread identifier threadPositions
pthread_t idhilomoverpelota; //Thread identifier threadMoveBall.
int error_hilo1, error_hilo2; //To check that there have been no errors in the threads.
/****************************/
 
 
int main()
{
	initscr(); //We enter ncurses.
	noecho(); //Do not leave the keys pressed.
 
        dibujar_marco(); //We draw the walls.
	pintar_paleta(); //We paint the palette.
        dibujar_pelota();  //We draw the ball.
	direc_aleatoria(); //So that the ball moves for the first time (We only call it here).
	escojer_dificultad(); //We asked the player the difficulty he wants the game to have (it will depend on the speed of the ball).
 
	srand( time(NULL) ); //We changed the rand seed.
 
	error_hilo1 = pthread_create(&idhiloposiciones, NULL, hiloposiciones, NULL); //We created it.
	error_hilo2 = pthread_create(&idhilomoverpelota, NULL, hilomoverpelota, NULL); //We created it
 
	if (error_hilo1 != 0 && error_hilo2 != 0) //If there has been an error, we can not move forward.
	{
		clear();
		move(LINES/2,COLS/2);
		printw("ERROR WHEN CREATING EXECUTION THREADS.");
		return -1;	
	} 
 
	while( key != 'e' && key != 'E' )//If we press E, we go.
	{
		key = getch();
		if (key == 'w' || key == 'W') { x_paleta = x_paleta - 1; }
		if (key == 's' || key == 'S') { x_paleta = x_paleta + 1; }
		if (key == 'a' || key == 'A') { y_paleta = y_paleta - 1; }
		if (key == 'd' || key == 'D') { y_paleta = y_paleta + 1; }
	}
 
	salir_ncurses(); kill(&idhiloposiciones); kill(&hilomoverpelota); return 0; //We have left pressing E, we left ncurses, we kill the threads and we go.
 
}
 
void *hiloposiciones()
{
	for(;;) 
	{
	    int i; //To tell.
 
	    clear(); //We erase the screen to renew all positions.
	    dibujar_marco(); //We redraw the frame.
 
            /*************** PALLETS ***********/
            if (y_paleta != 0 && y_paleta <= COLS -1 && x_paleta != 0 && (x_paleta - 3) != LINES - 1) //You will not go through the frame, will you?
	    {
	    	for( i=0; i<4; i++ )
	        {
			move(x_paleta + i, y_paleta);
			printw("#");
	        }
	    } else 
	     {
                   if (y_paleta <= 0) 
		   {
			y_paleta = 1; //We reset it to 1 (it can not leave the frame on the left).

		   	for( i=0; i<4; i++ )
	                {
				move(x_paleta + i, y_paleta);
				printw("#");
	           	}	
		   }
 
            	   if (y_paleta >= COLS - 1)
		   { 
		   	y_paleta = COLS - 2; //We return to adjust it to COLS - 2 (so it can not leave the frame, but this time on the right).
		   	for( i=0; i<4; i++ )
	               	{
				move(x_paleta + i, y_paleta);
				printw("#");
           	 	}
		   }
 
            	   if (x_paleta <= 0) //So that it does not come out above.
		   { 
		   	x_paleta = 1;
		   	for( i=0; i<4; i++ )
	               	{
				move(x_paleta + i, y_paleta);
				printw("#");
           	 	}
		   }
 
		   if ( (x_paleta + 3) >= LINES - 1) //So that it does not come out below.
		   { 
		   	x_paleta = LINES - 4;
		   	for( i=0; i<4; i++ )
	               	{
				move(x_paleta + i, y_paleta);
				printw("#");
           	 	}
		   }
	      }	
 
	     /***************** BALL ******************/
	     move(x_pelota, y_pelota); //According to the positions marked by the hilomoverpelota thread ...
	     printw("O"); // ...we paint the ball.
 
/*	     //----I USE IT TO SEE ERRORS IN VARIABLES AND POSITIONS.
	     move(3,3); 
	     printw("-DEBUG: dpx_pelota=%d; dpy_pelota=%d; x_pelota=%d; y_pelota=%d; x_paleta=%d; y_paleta=%d;", dpx_pelota, dpy_pelota, x_pelota, y_pelota, x_paleta, y_paleta); //DEBUG
*/
 
	     if (y_pelota <= 0) //It means that the ball has not stopped, the game is over.
	     {
	  	    kill(idhiloposiciones); kill(idhilomoverpelota);
		    clear();
	  	    move(LINES/2,COLS/2);
	  	    printw("END OF THE GAME!");
	     }
 
	     if ( (y_pelota == y_paleta) && ((x_pelota == x_paleta) || (x_pelota == x_paleta + 1) || (x_pelota == x_paleta + 2)  || (x_pelota == x_paleta + 3)) ) 
	     {
  	     	   dpy_pelota = - dpy_pelota; //If it bounces against the shovel, we have to change its meaning.
	     	   y_pelota = y_pelota + dpy_pelota; //After changing its meaning you have to update the position of the ball again.
	     }
 
	     usleep(20*1000); //sleep() works with seconds, that's why we use usleep (), which works with milliseconds.
	     refresh(); //We show the changes in the positions.
 
	}
}
 
/*************************** MOVEMENT BALL ***************************/
void *hilomoverpelota()
{
	for(;;)
	{
	     if (!( (y_pelota == y_paleta) && ((x_pelota == x_paleta) || (x_pelota == x_paleta + 1) || (x_pelota == x_paleta + 2)  || (x_pelota == x_paleta + 3))) )
	     {   
                     x_pelota = x_pelota + dpx_pelota; //If he is not bouncing with the shovel, he has to continue on his way, so he continues on his way.
		     y_pelota = y_pelota + dpy_pelota;
	     }
 
	     if (x_pelota <= 1) //So that the ball bounces against the wall.
	     {
	     	 dpx_pelota = - dpx_pelota;
	     }
 
	     if (x_pelota >= LINES - 1) //So that the ball bounces against the wall.
	     {
	     	 dpx_pelota = - dpx_pelota;     
	     }
 
	     if (y_pelota >= COLS - 1) //So that the ball bounces against the wall.
	     {
	     	 dpy_pelota = - dpy_pelota;     
	     }
 
	     usleep( dificultad*1000 );
	}
}
 
 
 
 
 
/************ Secondary functions such as drawing objects, leaving ncurses, ... ******************/
 
int salir_ncurses()
{
	endwin();
	return 0;
}
 
void dibujar_marco()
{
	int i;
        for(i=0;i<LINES;i++) //We paint the walls: LINES indicates the number of lines in the terminal and COLS indicates the number of columns (provided by the ncurses library).
        {
        	move(i,0);
        	printw("|");
        	move(i,COLS - 1);
        	printw("|");
        }
 
	for(i=0;i<COLS-1;i++)
	{
		move(0,i);
		printw("_");
		move(LINES -1,i);
		printw("_");
	}
}
 
void dibujar_pelota() //We draw the ball (in a random position within a margin).
{
	x_pelota = (int) ( rand() % ((LINES/2+4)-(LINES/2-4)+1) + (LINES/2 - 4) ); //We choose a random number with rand ().
	y_pelota = (int) ( rand() % ( (((COLS-1) - COLS/9) + 4)-(((COLS-1) - COLS/9) - 4)+1 ) + (((COLS-1) - COLS/9) - 4) );
	move(x_pelota, y_pelota);
	printw("O");	
}
 
 
void pintar_paleta() //We paint the palette.
{
	int i;
	y_paleta = 3; //Axis y > columns
	x_paleta = LINES/2 - 3; // Axis x >> lines
 
	for( i=0; i<4; i++ )
	{
		move(x_paleta + i, y_paleta);
		printw("#");
	}
}
 
void direc_aleatoria() //We chose a first random direction for the ball.
{
	dpx_pelota = ( rand() % (+1 - (-1) +1) + (-1) );
	dpy_pelota = -1;
 
}
 
 
void escojer_dificultad() //We choose the difficulty of the game.
{
	char d;
	clear();
	move(3,3);
	printw("\n-Creado por Alejanddro Finol\n"
	       "-Indicate the level of difficulty:\n"
	       "\t1 - Easy.\n"
	       "\t2 - Medium.\n"
	       "\t3 - Difficult.\n\n"
	       "\t(The controls are W,S,A y D)");
	d = getch();
	switch(d)
	{
		case '1': dificultad = 200; break;
		case '2': dificultad = 100; break;
		case '3': dificultad = 50; break; 
		default: 
			clear(); 
			move(3,3); 
			printw("No level of difficulty has been selected, level 2 will be taken by default (Medium). Press a key to continue.");
	                dificultad = 100;
			getch();
		break;
	}
}
 
